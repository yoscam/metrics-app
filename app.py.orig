from flask import Flask, Response
import random
import time
import threading
from config import NUM_APPS, THRESHOLD, METRICS_INTERVAL, TOP_X_APPS
from metrics_manager import MetricsManager

app = Flask(__name__)
metrics_manager = MetricsManager()

def generate_metrics():
    """Generate random metrics for each app."""
    metrics = {f"app{i+1}": random.randint(1, 12000) for i in range(NUM_APPS)}
    return metrics

def format_prometheus_metrics(metrics):
    """Format metrics in Prometheus format."""
    prometheus_metrics = []
    for app_name, value in metrics.items():
        prometheus_metrics.append(f'bigquery_written_bytes{{app_name="{app_name}"}} {value}')
    return "\n".join(prometheus_metrics)

def periodic_metrics_generation():
    """Periodically generate, store, and process metrics."""
    while True:
        metrics = generate_metrics()
        metrics_manager.store_metrics(metrics)
        metrics_manager.process_metrics(metrics, THRESHOLD)
        top_apps = metrics_manager.get_top_exceedance_apps(TOP_X_APPS)
        print(f"Top {TOP_X_APPS} apps exceeding threshold: {top_apps}")
        time.sleep(METRICS_INTERVAL)

@app.route('/metrics')
def metrics():
    """Endpoint to serve metrics in Prometheus format."""
    metrics = generate_metrics()
    prometheus_metrics = format_prometheus_metrics(metrics)
    return Response(prometheus_metrics, mimetype="text/plain")

if __name__ == "__main__":
    # Start the periodic metrics generation in a separate thread
    threading.Thread(target=periodic_metrics_generation, daemon=True).start()
    # Run the Flask app
    app.run(host="0.0.0.0", port=5000)